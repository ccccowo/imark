generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String           @id @default(cuid())
  name            String
  studentId       String?          @unique
  teacherId       String?          @unique
  username        String           @unique
  password        String
  email           String?          @unique
  role            String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  answerQuestions AnswerQuestion[] @relation("UserToAnswerQuestion")
  teacherClasses  Class[]          @relation("TeacherClasses")
  examResults     ExamResult[]
  studentClasses  StudentClass[]
}

model Class {
  id        String         @id @default(cuid())
  name      String
  teacherId String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  teacher   User           @relation("TeacherClasses", fields: [teacherId], references: [id])
  exams     Exam[]
  students  StudentClass[]

  @@unique([name, teacherId])
}

model StudentClass {
  id        String   @id @default(cuid())
  studentId String
  classId   String
  joinTime  DateTime @default(now())
  class     Class    @relation(fields: [classId], references: [id])
  student   User     @relation(fields: [studentId], references: [id])

  @@unique([studentId, classId])
}

model Exam {
  id              String           @id @default(cuid())
  name            String
  classId         String
  status          String           @default("NOT_READY")
  paperImage      String?
  fullScore       Float?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  answerQuestions AnswerQuestion[]
  class           Class            @relation(fields: [classId], references: [id])
  results         ExamResult[]
  examinees       Examinee[]
  questions       Question[]
}

model Question {
  id              String           @id @default(cuid())
  examId          String
  coordinates     String
  type            String
  orderNum        Int
  score           Float
  correctAnswer   String?
  answerQuestions AnswerQuestion[]
  exam            Exam             @relation(fields: [examId], references: [id])
}

model Examinee {
  id              String           @id @default(cuid())
  name            String
  studentId       String
  examId          String
  totalScore      Float?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  answerQuestions AnswerQuestion[] @relation("ExamineeToAnswerQuestion")
  exam            Exam             @relation(fields: [examId], references: [id])

  @@unique([examId, studentId])
}

model AnswerQuestion {
  id             String   @id @default(cuid())
  examId         String
  questionId     String
  examineeId     String
  answerQuestionImage String
  
  fullScore      Float?
  teacherScore   Float?
  aiScore        Float?
  teacherComment String?
  aiComment      String?
  aiStatus       String?
  aiConfidence   Float?
  aiAnswer       String?

  isGraded       Boolean? @default(false)

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation("UserToAnswerQuestion", fields: [userId], references: [id])
  examinee       Examinee @relation("ExamineeToAnswerQuestion", fields: [examineeId], references: [id])
  question       Question @relation(fields: [questionId], references: [id])
  exam           Exam     @relation(fields: [examId], references: [id])

  @@unique([examineeId, questionId])
}

model ExamResult {
  id        String   @id @default(cuid())
  examId    String
  studentId String
  score     Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   User     @relation(fields: [studentId], references: [id])
  exam      Exam     @relation(fields: [examId], references: [id])

  @@unique([examId, studentId])
}
